{
    "name": "ai-doc-search",
    "description": "AI Document Search (RAG Chatbot) using React, Tailwind, FastAPI, LangChain, FAISS/Pinecone, and Mistral.",
    "tasks": [
      {
        "path": "backend/main.py",
        "content": "from fastapi import FastAPI, UploadFile\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nimport tempfile\nfrom langchain_community.document_loaders import PyPDFLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_community.vectorstores import FAISS\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.chains import RetrievalQA\nfrom langchain_openai import ChatOpenAI\nimport os\n\napp = FastAPI()\n\n# Allow frontend connection\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Store vector DB globally\nvector_db = None\nqa_chain = None\n\nclass QueryRequest(BaseModel):\n    question: str\n\n@app.post(\"/upload\")\nasync def upload_file(file: UploadFile):\n    global vector_db, qa_chain\n    \n    # Save PDF temporarily\n    with tempfile.NamedTemporaryFile(delete=False, suffix=\".pdf\") as tmp:\n        tmp.write(await file.read())\n        tmp_path = tmp.name\n\n    # Load and split PDF\n    loader = PyPDFLoader(tmp_path)\n    docs = loader.load()\n    splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)\n    chunks = splitter.split_documents(docs)\n\n    # Create embeddings + FAISS vector DB\n    embeddings = HuggingFaceEmbeddings(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\n    vector_db = FAISS.from_documents(chunks, embeddings)\n\n    # Create QA chain with Mistral\n    retriever = vector_db.as_retriever()\n    llm = ChatOpenAI(\n        model=\"open-mistral-7b\",  # Can also use mistral-medium, mistral-large\n        openai_api_key=os.getenv(\"MISTRAL_API_KEY\"),\n        openai_api_base=\"https://api.mistral.ai/v1\"\n    )\n    qa_chain = RetrievalQA.from_chain_type(\n        llm=llm,\n        retriever=retriever\n    )\n\n    return {\"status\": \"success\", \"message\": \"PDF processed successfully.\"}\n\n@app.post(\"/chat\")\nasync def chat_with_doc(request: QueryRequest):\n    global qa_chain\n    if qa_chain is None:\n        return {\"error\": \"No document uploaded yet.\"}\n\n    answer = qa_chain.run(request.question)\n    return {\"answer\": answer}"
      },
      {
        "path": "backend/requirements.txt",
        "content": "fastapi\nuvicorn\nlangchain\nlangchain-community\nlangchain-openai\nsentence-transformers\nfaiss-cpu\npypdf\npython-multipart"
      },
      {
        "path": "frontend/src/App.jsx",
        "content": "import { useState } from \"react\";\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [question, setQuestion] = useState(\"\");\n  const [chat, setChat] = useState([]);\n\n  const uploadPDF = async () => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    await fetch(\"http://localhost:8000/upload\", {\n      method: \"POST\",\n      body: formData,\n    });\n\n    alert(\"PDF uploaded successfully!\");\n  };\n\n  const askQuestion = async () => {\n    const res = await fetch(\"http://localhost:8000/chat\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ question }),\n    });\n\n    const data = await res.json();\n    setChat([...chat, { q: question, a: data.answer }]);\n    setQuestion(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-6 flex flex-col items-center\">\n      <h1 className=\"text-2xl font-bold mb-4\">ðŸ“‘ AI Document Search</h1>\n\n      {/* File Upload */}\n      <div className=\"mb-4\">\n        <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n        <button\n          onClick={uploadPDF}\n          className=\"ml-2 px-4 py-2 bg-blue-500 text-white rounded\"\n        >\n          Upload PDF\n        </button>\n      </div>\n\n      {/* Chat UI */}\n      <div className=\"w-full max-w-xl bg-white p-4 rounded shadow\">\n        <div className=\"mb-4 h-64 overflow-y-auto border p-2\">\n          {chat.map((c, i) => (\n            <div key={i} className=\"mb-2\">\n              <p className=\"font-semibold\">Q: {c.q}</p>\n              <p className=\"text-gray-700\">A: {c.a}</p>\n            </div>\n          ))}\n        </div>\n        <div className=\"flex\">\n          <input\n            className=\"flex-1 border px-2 py-1\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            placeholder=\"Ask your document...\"\n          />\n          <button\n            onClick={askQuestion}\n            className=\"ml-2 px-4 py-1 bg-green-500 text-white rounded\"\n          >\n            Ask\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"
      },
      {
        "path": "frontend/package.json",
        "content": "{\n  \"name\": \"doc-search-ai\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\",\n    \"vite\": \"^4.0.0\"\n  }\n}"
      },
      {
        "path": "docker-compose.yml",
        "content": "version: \"3.8\"\nservices:\n  backend:\n    build: ./backend\n    ports:\n      - \"8000:8000\"\n    environment:\n      - MISTRAL_API_KEY=${MISTRAL_API_KEY}\n  frontend:\n    build: ./frontend\n    ports:\n      - \"3000:3000\""
      }
    ]
  }
  